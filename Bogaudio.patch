From b5521a1a509d51199602ccbcc2d9db6a6bd359a7 Mon Sep 17 00:00:00 2001
From: Matt Demanett <matt@demanett.net>
Date: Sun, 23 Aug 2020 09:17:42 -0400
Subject: [PATCH] (L)VCF: avoid filter blowup when cutoff is zero at high
 sampling rates.

---
 src/LVCF.cpp                  | 1 +
 src/VCF.cpp                   | 2 +-
 src/dsp/filters/multimode.cpp | 5 +++++
 src/dsp/filters/multimode.hpp | 2 ++
 4 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/src/LVCF.cpp b/src/LVCF.cpp
index a1b5251..41c492d 100644
--- a/src/LVCF.cpp
+++ b/src/LVCF.cpp
@@ -15,6 +15,7 @@ void LVCF::Engine::setParams(
 	MultimodeFilter::BandwidthMode bwm
 ) {
 	frequency = semitoneToFrequency(_frequencySL.next(frequencyToSemitone(frequency)));
+	frequency = clamp(semitoneToFrequency(_frequencySL.next(frequencyToSemitone(frequency))), LVCF::minFrequency, LVCF::maxFrequency);
 
 	_filter.setParams(
 		_sampleRate,
diff --git a/src/VCF.cpp b/src/VCF.cpp
index dbdc50c..bbcfcae 100644
--- a/src/VCF.cpp
+++ b/src/VCF.cpp
@@ -13,7 +13,7 @@ void VCF::Engine::setParams(
 	float qbw,
 	MultimodeFilter::BandwidthMode bwm
 ) {
-	frequency = semitoneToFrequency(_frequencySL.next(frequencyToSemitone(frequency)));
+	frequency = clamp(semitoneToFrequency(_frequencySL.next(frequencyToSemitone(frequency))), VCF::minFrequency, VCF::maxFrequency);
 
 	int i = -1, j = -1;
 	std::fill(_gains, _gains + nFilters, 0.0f);
diff --git a/src/dsp/filters/multimode.cpp b/src/dsp/filters/multimode.cpp
index 77b26de..a082eb0 100644
--- a/src/dsp/filters/multimode.cpp
+++ b/src/dsp/filters/multimode.cpp
@@ -178,6 +178,10 @@ constexpr float MultimodeTypes::minBWPitch;
 constexpr float MultimodeTypes::maxBWPitch;
 
 
+template<int N> float MultimodeDesigner<N>::effectiveMinimumFrequency() {
+	return minFrequency * std::max(1.0f, roundf(_sampleRate / 44100.0f));
+}
+
 template<int N> void MultimodeDesigner<N>::setParams(
 	BiquadBank<T, N>& biquads,
 	float& outGain,
@@ -194,6 +198,7 @@ template<int N> void MultimodeDesigner<N>::setParams(
 	assert(poles >= minPoles && (poles <= N || (poles <= 2*N && (mode == LOWPASS_MODE || mode == HIGHPASS_MODE))));
 	assert(poles % modPoles == 0);
 	assert(frequency >= minFrequency - 0.00001f && frequency <= maxFrequency);
+	frequency = std::max(frequency, effectiveMinimumFrequency());
 	assert(qbw >= minQbw && qbw <= maxQbw);
 
 	bool repole = _type != type || _mode != mode || _nPoles != poles || (type == CHEBYSHEV_TYPE && (mode == LOWPASS_MODE || mode == HIGHPASS_MODE) && _qbw != qbw);
diff --git a/src/dsp/filters/multimode.hpp b/src/dsp/filters/multimode.hpp
index 7086983..0b308fb 100644
--- a/src/dsp/filters/multimode.hpp
+++ b/src/dsp/filters/multimode.hpp
@@ -124,6 +124,7 @@ struct MultimodeDesigner : MultimodeTypes {
 	Pole _poles[maxPoles / 2];
 	int _nBiquads = 0;
 
+	float effectiveMinimumFrequency();
 	void setParams(
 		BiquadBank<T, N>& biquads,
 		float& outGain,
@@ -157,6 +158,7 @@ struct MultimodeBase : MultimodeFilter {
 	BiquadBank<T, N> _biquads;
 	float _outGain = 1.0f;
 
+	inline float effectiveMinimumFrequency() { return _designer.effectiveMinimumFrequency(); }
 	void setParams(
 		float sampleRate,
 		Type type,
From ece430fc99f2ca33e1a7dcae7e1585094ee590e4 Mon Sep 17 00:00:00 2001
From: Matt Demanett <matt@demanett.net>
Date: Mon, 7 Sep 2020 22:02:29 -0400
Subject: [PATCH] Filters: add cutoff limit at 49% of sample rate, to support
 low sample rates. #140

---
 src/dsp/filters/multimode.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/dsp/filters/multimode.cpp b/src/dsp/filters/multimode.cpp
index a082eb0..e593fe7 100644
--- a/src/dsp/filters/multimode.cpp
+++ b/src/dsp/filters/multimode.cpp
@@ -199,6 +199,7 @@ template<int N> void MultimodeDesigner<N>::setParams(
 	assert(poles % modPoles == 0);
 	assert(frequency >= minFrequency - 0.00001f && frequency <= maxFrequency);
 	frequency = std::max(frequency, effectiveMinimumFrequency());
+	frequency = std::min(frequency, 0.49f * sampleRate);
 	assert(qbw >= minQbw && qbw <= maxQbw);
 
 	bool repole = _type != type || _mode != mode || _nPoles != poles || (type == CHEBYSHEV_TYPE && (mode == LOWPASS_MODE || mode == HIGHPASS_MODE) && _qbw != qbw);
